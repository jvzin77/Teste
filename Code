import discord
from discord.ext import commands
from discord import app_commands
import re
import random
import asyncio
from datetime import datetime, timedelta, timezone
import os
import sys
import json


intents = discord.Intents.default()
intents.members = True  
intents.presences = True
intents.message_content = True  # Habilitando o acesso ao conteúdo das mensagens

bot = commands.Bot(command_prefix="!", intents=intents)

# Variável global para indicar se o bot foi reiniciado pelo comando /reset
foi_reiniciado = False

@bot.event
async def on_ready():
    global foi_reiniciado
    print(f'Logado como {bot.user}')
    try:
        synced = await bot.tree.sync()
        print(f"Sincronizados {len(synced)} comando(s): {', '.join([cmd.name for cmd in synced])}")

        # Envia uma mensagem ao canal de status se o reinício foi solicitado pelo comando /reset
        if foi_reiniciado:
            canal_status = bot.get_channel(1305540878814810122)
            if canal_status is not None:
                await canal_status.send("Reiniciação concluída com sucesso e bot pronto para uso!")
            # Reseta a variável para evitar mensagens extras no próximo início
            foi_reiniciado = False
    except Exception as e:
        print(f"Erro ao sincronizar comandos: {e}")

@bot.tree.command(name="userinfo", description="Mostra informações sobre um usuário")
async def userinfo(interaction: discord.Interaction, user: discord.Member = None):
        if user is None:
            user = interaction.user

        embed = discord.Embed(title="Informações do Usuário", color=discord.Color.blue())
        embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.add_field(name="Nome", value=user.name, inline=True)
        embed.add_field(name="Discriminador", value=user.discriminator, inline=True)
        embed.add_field(name="ID", value=user.id, inline=True)
        embed.add_field(name="Status", value=str(user.status).title(), inline=True)
        embed.add_field(name="Entrou no Servidor", value=user.joined_at.strftime("%d/%m/%Y %H:%M:%S"), inline=True)
        embed.add_field(name="Conta Criada", value=user.created_at.strftime("%d/%m/%Y %H:%M:%S"), inline=True)
        embed.add_field(name="Cargos", value=", ".join([role.mention for role in user.roles if role.name != "@everyone"]), inline=True)

        await interaction.response.send_message(embed=embed, ephemeral=False)

class AdicionarGrupo(app_commands.Group):
    def __init__(self):
        super().__init__(name="adicionar", description="Comandos para adicionar recursos")

    @app_commands.command(name="cargo", description="Adiciona um cargo ao usuário")
    @app_commands.describe(user="O usuário ao qual deseja adicionar o cargo", role="O cargo que deseja adicionar ao usuário")
    async def cargo(self, interaction: discord.Interaction, user: discord.Member, role: discord.Role):
        # Verifica permissão de administrador
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(
                title="Permissão Insuficiente",
                description="**Apenas administradores podem usar este comando.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Verifica se o usuário já possui o cargo
        if role in user.roles:
            embed = discord.Embed(
                title="Erro",
                description=f"O usuário {user.mention} já possui o cargo {role.mention}.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            # Adiciona o cargo ao usuário
            await user.add_roles(role)
            embed = discord.Embed(
                title="Sucesso",
                description=f"Cargo {role.mention} adicionado ao usuário {user.mention} com sucesso!",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)

            # Aguarda antes de deletar a resposta original
            await asyncio.sleep(5)
            message = await interaction.original_response()
            await message.delete()
        except discord.Forbidden:
            embed = discord.Embed(
                title="Erro",
                description="Erro ao adicionar o cargo: **Permissões insuficientes.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except discord.HTTPException as e:
            embed = discord.Embed(
                title="Erro",
                description=f"Erro ao adicionar o cargo: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            embed = discord.Embed(
                title="Erro",
                description=f"Erro ao adicionar o cargo: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

# Adiciona o grupo de comandos ao bot
bot.tree.add_command(AdicionarGrupo())

@bot.tree.command(name="dado", description="Role um dado de 6 lados.")
async def dado(interaction: discord.Interaction):
    try:
        # Defere a resposta para permitir mais tempo
        await interaction.response.defer()

        # Lógica do comando
        resultado = random.randint(1, 6)
        embed = discord.Embed(
            title="Dado Jogado",
            description=f"O resultado foi: {resultado}",
            color=discord.Color.gold()
        )
        embed.set_footer(
            text=f"Jogado por: {interaction.user.display_name}",
            icon_url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url
        )
        # Envia a mensagem de resposta com o embed
        await interaction.followup.send(embed=embed)
    except Exception as e:
        # Envia uma mensagem de erro, caso ocorra um problema
        mensagem_erro = await interaction.followup.send(
            f"Erro ao jogar o dado: {str(e)}",
            ephemeral=True
        )
        # Aguarda 5 segundos antes de excluir a mensagem de erro
        await asyncio.sleep(5)
        await mensagem_erro.delete()

class RemoverGrupo(app_commands.Group):
    def __init__(self):
        super().__init__(name="remover", description="Comandos para remover recursos")

    @app_commands.command(name="cargo", description="Remove um cargo do usuário")
    @app_commands.describe(user="O usuário do qual deseja remover o cargo", role="O cargo que deseja remover do usuário")
    async def cargo(self, interaction: discord.Interaction, user: discord.Member, role: discord.Role):
        # Verifica permissão de administrador
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(
                title="Permissão Insuficiente",
                description="**Apenas administradores podem usar este comando.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Verifica se o usuário possui o cargo
        if role not in user.roles:
            embed = discord.Embed(
                title="Erro",
                description=f"O usuário {user.mention} não possui o cargo {role.mention}.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            # Remove o cargo do usuário
            await user.remove_roles(role)
            embed = discord.Embed(
                title="Sucesso",
                description=f"Cargo {role.mention} removido do usuário {user.mention} com sucesso!",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)

            # Aguarda antes de deletar a resposta original
            await asyncio.sleep(5)
            message = await interaction.original_response()
            await message.delete()
        except discord.Forbidden:
            embed = discord.Embed(
                title="Erro",
                description="Erro ao remover o cargo: **Permissões insuficientes.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except discord.HTTPException as e:
            embed = discord.Embed(
                title="Erro",
                description=f"Erro ao remover o cargo: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            embed = discord.Embed(
                title="Erro",
                description=f"Erro ao remover o cargo: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

# Adiciona o grupo de comandos ao bot
bot.tree.add_command(RemoverGrupo())

@bot.tree.command(name="avatar", description="Mostra o avatar do usuário")
@discord.app_commands.describe(user="O usuário do qual deseja mostrar o avatar")
async def avatar(interaction: discord.Interaction, user: discord.Member = None):
    try:
        if user is None:
            user = interaction.user

        embed = discord.Embed(title=f"Avatar de {user.display_name}", color=discord.Color.blue())

        # Verifica se o usuário possui avatar antes de acessar a URL
        if user.avatar:
            embed.set_image(url=user.avatar.url)
        else:
            embed.description = "O usuário não possui um avatar."

        await interaction.response.send_message(embed=embed)
    except Exception as e:
        await interaction.response.send_message(f"Erro ao obter o avatar do usuário: {str(e)}", ephemeral=True)

@bot.tree.command(name="serverinfo", description="Mostra informações sobre o servidor")
async def server_info(interaction: discord.Interaction):
    try:
        guild = interaction.guild
        embed = discord.Embed(title=f"Informações do Servidor: {guild.name}", color=discord.Color.blue())
        embed.add_field(name="ID do Servidor", value=guild.id, inline=True)
        embed.add_field(name="Dono do Servidor", value=guild.owner, inline=True)
        embed.add_field(name="Número de Membros", value=guild.member_count, inline=True)
        embed.add_field(name="Criado em", value=guild.created_at.strftime("%d/%m/%Y"), inline=True)
        await interaction.response.send_message(embed=embed)
    except Exception as e:
        error_embed = discord.Embed(title="Erro ao Obter Informações do Servidor", color=discord.Color.red())
        error_embed.add_field(name="Mensagem de Erro:", value="Falha ao obter informações do servidor. Tente novamente.")
        await interaction.response.send_message(embed=error_embed)

@server_info.error
async def server_info_error(ctx, error):
    if isinstance(error, commands.CommandError):
        error_embed = discord.Embed(title="Erro ao Executar o Comando", color=discord.Color.red())
        error_embed.add_field(name="Mensagem de Erro:", value="Verifique se o comando está correto e tente novamente.")
        await ctx.send(embed=error_embed)

@bot.tree.command(name="ban", description="Bane um usuário")
@discord.app_commands.describe(user="O usuário que deseja banir")
@discord.app_commands.describe(reason="O motivo do banimento (opcional)")
async def ban(interaction: discord.Interaction, user: discord.Member, *, reason: str = "Nenhum motivo fornecido"):
    try:
        if not interaction.user.guild_permissions.ban_members:
            embed = discord.Embed(title="Permissão Negada", description="Você não tem permissão para usar este comando.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        if user == interaction.user:
            embed = discord.Embed(title="Ação Inválida", description="Você não pode se banir.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        embed = discord.Embed(title="Usuário Banido", description=f"{user.mention} foi banido.", color=discord.Color.red())
        embed.add_field(name="Usuário", value=user.mention, inline=True)
        embed.add_field(name="Banido por", value=interaction.user.mention, inline=True)
        embed.add_field(name="Motivo", value=reason, inline=False)
        embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text=f"ID do usuário: {user.id}")

        await interaction.guild.ban(user, reason=reason)
        await interaction.response.send_message(embed=embed)
        await asyncio.sleep(5)
        message = await interaction.original_response()
        await message.delete()

    except discord.Forbidden:
        embed = discord.Embed(title="Erro", description="Permissões insuficientes para banir o usuário.", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except discord.HTTPException as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao banir o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao banir o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="unban", description="Desbane um usuário por ID")
@discord.app_commands.describe(id="O ID do usuário que deseja desbanir")
@discord.app_commands.describe(reason="O motivo do desbanimento (opcional)")
async def unban(interaction: discord.Interaction, id: str, *, reason: str = "Nenhum motivo fornecido"):
    try:
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(title="Permissão Negada", description="Você não tem permissão para usar este comando.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        try:
            user_id = int(id)
        except ValueError:
            embed = discord.Embed(title="ID Inválido", description="O ID fornecido não é válido.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        user = await bot.fetch_user(user_id)
        await interaction.guild.unban(user, reason=reason)

        embed = discord.Embed(title="Usuário Desbanido", description=f"{user.mention} foi desbanido.", color=discord.Color.green())
        embed.add_field(name="Usuário", value=user.mention, inline=True)
        embed.add_field(name="Desbanido por", value=interaction.user.mention, inline=True)
        embed.add_field(name="Motivo", value=reason, inline=False)
        embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text=f"ID do usuário: {user.id}")

        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        embed = discord.Embed(title="Erro", description="Permissões insuficientes para desbanir o usuário.", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except discord.HTTPException as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao desbanir o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao desbanir o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="clear", description="Limpa mensagens no canal")
@discord.app_commands.describe(quantidade="O número de mensagens que deseja apagar")
async def clear(interaction: discord.Interaction, quantidade: int):
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("Você não tem permissão para usar este comando. Apenas membros com permissão de gerenciar mensagens podem usar.", ephemeral=True)
        return

    if quantidade < 1 or quantidade > 1000:
        await interaction.response.send_message("Você deve especificar uma quantidade entre 1 e 1000.", ephemeral=True)
        return

    await interaction.response.send_message("⌛ Processando...", ephemeral=True)  # Envia uma mensagem rápida de feedback

    try:
        deleted = await interaction.channel.purge(limit=quantidade)
        success_message = f"🎉 | O chat teve {len(deleted)} mensagens apagadas com sucesso! Por {interaction.user.mention}"
        await interaction.followup.send(success_message)  # Envia a mensagem de sucesso no canal
    except discord.Forbidden:
        await interaction.followup.send("Erro ao apagar mensagens: Permissões insuficientes.", ephemeral=True)
    except discord.HTTPException as e:
        await interaction.followup.send(f"Erro ao apagar mensagens: {str(e)}", ephemeral=True)
    except Exception as e:
        await interaction.followup.send(f"Erro ao apagar mensagens: {str(e)}", ephemeral=True)

@bot.tree.command(name="kick", description="Expulsa um usuário do servidor")
@discord.app_commands.describe(user="O usuário que deseja expulsar", reason="O motivo da expulsão (opcional)")
async def kick(interaction: discord.Interaction, user: discord.Member, *, reason: str = "Nenhum motivo fornecido"):
    try:
        if not interaction.user.guild_permissions.kick_members:
            embed = discord.Embed(title="Permissão Negada", description="Você não tem permissão para usar este comando.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        if user == interaction.user:
            embed = discord.Embed(title="Ação Inválida", description="Você não pode se expulsar.", color=discord.Color.red())
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        embed = discord.Embed(title="Usuário Expulso", description=f"{user.mention} foi expulso.", color=discord.Color.red())
        embed.add_field(name="Usuário", value=user.mention, inline=True)
        embed.add_field(name="Expulso por", value=interaction.user.mention, inline=True)
        embed.add_field(name="Motivo", value=reason, inline=False)
        embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
        embed.set_footer(text=f"ID do usuário: {user.id}")

        await interaction.guild.kick(user, reason=reason)
        await interaction.response.send_message(embed=embed)
        await asyncio.sleep(5)
        message = await interaction.original_response()
        await message.delete()

    except discord.Forbidden:
        embed = discord.Embed(title="Erro", description="Permissões insuficientes para expulsar o usuário.", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except discord.HTTPException as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao expulsar o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        embed = discord.Embed(title="Erro", description=f"Erro ao expulsar o usuário: {str(e)}", color=discord.Color.red())
        await interaction.response.send_message(embed=embed, ephemeral=True)

# IDs dos cargos de advertência
ADV_ROLES = {
    "ADV1": 1248328164892086385,
    "ADV2": 1250972755764183091,
    "ADV3": 1250972827046383626,
}

class Advertencia(app_commands.Group):
    def __init__(self):
        super().__init__(name="advertencia", description="Comandos para aplicar e remover advertências")

    @app_commands.command(name="add", description="Adiciona uma advertência ao usuário")
    @app_commands.describe(user="Selecione o usuário a ser advertido", role="Cargo de advertência (opcional)", reason="Motivo da advertência (opcional)")
    @app_commands.choices(
        role=[
            app_commands.Choice(name="Advertência 1", value="ADV1"),
            app_commands.Choice(name="Advertência 2", value="ADV2"),
            app_commands.Choice(name="Advertência 3", value="ADV3"),
        ]
    )
    async def add(self, interaction: discord.Interaction, user: discord.Member, role: str = None, reason: str = "Nenhuma razão especificada"):
        # Verifica se o usuário tem permissão para adicionar o cargo
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(
                title="Permissão Insuficiente",
                description="**Apenas administradores podem usar este comando.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Se não for especificado nenhum cargo, envia uma mensagem informando e sai
        if role is None:
            embed = discord.Embed(
                title="Cargo não especificado",
                description="Você deve selecionar um cargo de advertência para aplicar.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Obtém o cargo de advertência
        role_id = ADV_ROLES.get(role)
        if role_id is None:
            await interaction.response.send_message("Cargo de advertência não encontrado.", ephemeral=True)
            return

        role = interaction.guild.get_role(role_id)

        # Verifica se o usuário já possui o cargo de advertência
        if role in user.roles:
            embed = discord.Embed(
                title="Advertência Já Aplicada",
                description=f"O usuário {user.mention} já possui o cargo de {role.mention}.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Adiciona o cargo de advertência ao usuário
        try:
            await user.add_roles(role)
            embed = discord.Embed(
                title="Advertência Aplicada",
                description=f"O cargo de **{role.mention}** foi adicionado ao usuário {user.mention}.\n**Motivo:** {reason}",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("Erro ao adicionar o cargo: Permissões insuficientes.", ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"Erro ao adicionar o cargo: {str(e)}", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Erro inesperado: {str(e)}", ephemeral=True)

    @app_commands.command(name="remove", description="Remove uma advertência do usuário")
    @app_commands.describe(user="Selecione o usuário a ter a advertência removida", role="Cargo de advertência (opcional)")
    @app_commands.choices(
        role=[
            app_commands.Choice(name="Advertência 1", value="ADV1"),
            app_commands.Choice(name="Advertência 2", value="ADV2"),
            app_commands.Choice(name="Advertência 3", value="ADV3"),
        ]
    )
    async def remove(self, interaction: discord.Interaction, user: discord.Member, role: str = None):
        # Verifica se o usuário tem permissão para remover o cargo
        if not interaction.user.guild_permissions.administrator:
            embed = discord.Embed(
                title="Permissão Insuficiente",
                description="**Apenas administradores podem usar este comando.**",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Se não for especificado nenhum cargo, envia uma mensagem informando e sai
        if role is None:
            embed = discord.Embed(
                title="Cargo não especificado",
                description="Você deve selecionar um cargo de advertência para remover.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Obtém o cargo de advertência
        role_id = ADV_ROLES.get(role)
        if role_id is None:
            await interaction.response.send_message("Cargo de advertência não encontrado.", ephemeral=True)
            return

        role = interaction.guild.get_role(role_id)

        # Verifica se o usuário não possui o cargo de advertência
        if role not in user.roles:
            embed = discord.Embed(
                title="Nenhuma Advertência Encontrada",
                description=f"O usuário {user.mention} não possui o cargo de {role.mention}.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return

        # Remove o cargo de advertência do usuário
        try:
            await user.remove_roles(role)
            embed = discord.Embed(
                title="Advertência Removida",
                description=f"O cargo de **{role.mention}** foi removido do usuário {user.mention}.",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("Erro ao remover o cargo: Permissões insuficientes.", ephemeral=True)
        except discord.HTTPException as e:
            await interaction.response.send_message(f"Erro ao remover o cargo: {str(e)}", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Erro inesperado: {str(e)}", ephemeral=True)

# Adiciona o grupo de comandos ao bot
bot.tree.add_command(Advertencia())

@bot.tree.command(name="roleinfo", description="Mostra informações sobre um cargo específico.")
@discord.app_commands.describe(role="O cargo sobre o qual deseja obter informações")
async def role_info(interaction: discord.Interaction, role: discord.Role):
    identic_emoji = "<:Identic:1251726244500738099>"
    config_emoji = "<:Config:1251726327707602996>"
    calen_emoji = "<:Calen:1251726417016655974>"
    brush_emoji = "🖌️"
    okv_emoji = "<:CheckV:1251726045657436242>"
    nox_emoji = "<:NoX:1251726507433529445>"

    mentionable = role.mentionable
    hoist = role.hoist
    managed = role.managed

    # Define a cor da embed para branca usando o código hexadecimal
    embed = discord.Embed(color=0xFFFFFF)

    properties = [
        (mentionable, "Mencionável"),
        (hoist, "Mostrado Separadamente"),
        (managed, "Integração")
    ]

    properties_str = ""
    for prop_value, prop_name in properties:
        emoji = okv_emoji if prop_value else nox_emoji
        properties_str += f"{emoji} {prop_name}\n"

    # Adiciona o nome do cargo na embed sem título
    embed.description = role.name

    # Identidade
    embed.add_field(name=f"{identic_emoji} Identidade", value=f"{role.id}", inline=False)

    # Propriedades
    embed.add_field(name=f"{config_emoji} Propriedades", value=properties_str, inline=False)

    # Tempo de Cargo Criado
    created_at_timestamp = role.created_at.timestamp()
    embed.add_field(name=f"{calen_emoji} Cargo Criado", value=f"<t:{int(created_at_timestamp)}:F>", inline=False)

    # Código da Cor
    color_code = str(role.color)
    embed.add_field(name=f"{brush_emoji} Código da Cor", value=color_code, inline=False)

    # Permissões
    permission_names = {
        "create_instant_invite": "Criar Convite Instantâneo",
        "add_reactions": "Adicionar Reações",
        "stream": "Transmitir",
        "read_messages": "Ler Mensagens",
        "send_messages": "Enviar Mensagens",
        "embed_links": "Inserir Links",
        "attach_files": "Anexar Arquivos",
        "read_message_history": "Ler Histórico de Mensagens",
        "mention_everyone": "Mencionar Todos",
        "use_external_emojis": "Emojis Externos",
        "connect": "Conectar",
        "speak": "Falar",
        "use_voice_activation": "Usar Ativação por Voz",
        "change_nickname": "Mudar Apelido",
        "use_application_commands": "Usar Comandos de Aplicativo",
        "request_to_speak": "Solicitar para Falar",
        "create_public_threads": "Criar Tópicos Públicos",
        "create_private_threads": "Criar Tópicos Privados",
        "use_external_stickers": "Adesivos Externos",
        "send_messages_in_threads": "Enviar Mensagens em Tópicos",
        "use_embedded_activities": "Usar Atividades Incorporadas",
        "use_soundboard": "Usar Mesa de Som",
        "create_expressions": "Criar Expressões",
        "use_external_sounds": "Usar Sons Externos",
        "send_voice_messages": "Enviar Mensagens de Voz"
    }

    permissions = []
    for perm, value in role.permissions:
        if value:
            permissions.append(permission_names.get(perm, perm.replace("_", " ").capitalize()))

    permissions_str = "\n".join([f"``{perm}``" for perm in permissions])
    embed.add_field(name="Permissões", value=permissions_str, inline=False)

    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="ping", description="Mostra a latência atual do bot.")
async def ping(interaction: discord.Interaction):
    # Obtendo a latência em milissegundos
    latency = bot.latency * 1000  # em milissegundos

    # Criando o Embed
    embed = discord.Embed(
        title="Pong!",
        description=f"**Latência do bot:** {latency:.2f}ms",
        color=discord.Color.green()
    )

    embed.set_footer(text="Comando de ping executado com sucesso!")

    # Enviando a resposta no formato de embed
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="reset", description="Reinicia o bot.")
async def reset(interaction: discord.Interaction):
    global foi_reiniciado
    if interaction.user.id != 643956388845846538:
        await interaction.response.send_message("Você não tem permissão para reiniciar o bot.", ephemeral=True)
        return

    # Define a variável para indicar que o reset foi solicitado via comando
    foi_reiniciado = True
    await interaction.response.send_message("Reiniciando o bot...", ephemeral=True)

    # Envia mensagem ao canal de status que o bot está reiniciando
    canal_status = bot.get_channel(1305540878814810122)  # ID do canal de status
    if canal_status:
        await canal_status.send("Bot está reiniciando...")

    print("Comando /reset acionado. Reiniciando o bot...")  # Log para o console

    # Tenta reiniciar o bot
    try:
        os.execv(sys.executable, ['python'] + sys.argv)
    except Exception as e:
        await interaction.followup.send(f"Erro ao reiniciar o bot: {str(e)}", ephemeral=True)
        print(f"Erro ao reiniciar: {e}")  # Log de erro no console

@bot.event
async def on_ready():
    global foi_reiniciado
    try:
        # Envia mensagem ao canal de status indicando que o bot foi iniciado
        canal_status = bot.get_channel(1305540878814810122)  # ID do canal de status
        if canal_status:
            if foi_reiniciado:
                await canal_status.send("Bot reiniciado com sucesso e pronto para uso!")
                await canal_status.send("A reinicialização foi concluída.")  # Mensagem confirmando que a reinicialização foi concluída.
                foi_reiniciado = False  # Reseta a variável após enviar a mensagem de reinício concluído
            else:
                await canal_status.send("Bot iniciado com sucesso!")

        # Log para o console (opcional)
        print(f'Logado como {bot.user}')
        synced = await bot.tree.sync()
        print(f"Comando(s) sincronizado(s): {', '.join([cmd.name for cmd in synced])}")

    except Exception as e:
        print(f"Erro ao sincronizar comandos: {e}")
